// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workflow_run.sql

package dao

import (
	"context"

	null "github.com/guregu/null/v6"
)

const completeWorkflowRun = `-- name: CompleteWorkflowRun :exec
UPDATE workflow_run
SET status = $2,
    finished_at = $3
WHERE id = $1
`

type CompleteWorkflowRunParams struct {
	ID         int32    `json:"id"`
	Status     string   `json:"status"`
	FinishedAt null.Int `json:"finished_at"`
}

// CompleteWorkflowRun
//
//	UPDATE workflow_run
//	SET status = $2,
//	    finished_at = $3
//	WHERE id = $1
func (q *Queries) CompleteWorkflowRun(ctx context.Context, arg *CompleteWorkflowRunParams) error {
	_, err := q.db.Exec(ctx, completeWorkflowRun, arg.ID, arg.Status, arg.FinishedAt)
	return err
}

const createWorkflowRun = `-- name: CreateWorkflowRun :one
INSERT INTO workflow_run (
  workflow_id, status, started_at, created_at, updated_at
) VALUES (
  $1, 'running', $2, $3, $4
)
RETURNING id, workflow_id, status, started_at, finished_at, created_at, updated_at
`

type CreateWorkflowRunParams struct {
	WorkflowID int32 `json:"workflow_id"`
	StartedAt  int64 `json:"started_at"`
	CreatedAt  int64 `json:"created_at"`
	UpdatedAt  int64 `json:"updated_at"`
}

// CreateWorkflowRun
//
//	INSERT INTO workflow_run (
//	  workflow_id, status, started_at, created_at, updated_at
//	) VALUES (
//	  $1, 'running', $2, $3, $4
//	)
//	RETURNING id, workflow_id, status, started_at, finished_at, created_at, updated_at
func (q *Queries) CreateWorkflowRun(ctx context.Context, arg *CreateWorkflowRunParams) (*WorkflowRun, error) {
	row := q.db.QueryRow(ctx, createWorkflowRun,
		arg.WorkflowID,
		arg.StartedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i WorkflowRun
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.Status,
		&i.StartedAt,
		&i.FinishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getWorkflowRun = `-- name: GetWorkflowRun :one
SELECT id, workflow_id, status, started_at, finished_at, created_at, updated_at FROM workflow_run
WHERE id = $1
`

// GetWorkflowRun
//
//	SELECT id, workflow_id, status, started_at, finished_at, created_at, updated_at FROM workflow_run
//	WHERE id = $1
func (q *Queries) GetWorkflowRun(ctx context.Context, id int32) (*WorkflowRun, error) {
	row := q.db.QueryRow(ctx, getWorkflowRun, id)
	var i WorkflowRun
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.Status,
		&i.StartedAt,
		&i.FinishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listWorkflowRuns = `-- name: ListWorkflowRuns :many
SELECT id, workflow_id, status, started_at, finished_at, created_at, updated_at
FROM workflow_run
WHERE workflow_id = $1
ORDER BY started_at DESC
LIMIT 25
`

// ListWorkflowRuns
//
//	SELECT id, workflow_id, status, started_at, finished_at, created_at, updated_at
//	FROM workflow_run
//	WHERE workflow_id = $1
//	ORDER BY started_at DESC
//	LIMIT 25
func (q *Queries) ListWorkflowRuns(ctx context.Context, workflowID int32) ([]*WorkflowRun, error) {
	rows, err := q.db.Query(ctx, listWorkflowRuns, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WorkflowRun
	for rows.Next() {
		var i WorkflowRun
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.Status,
			&i.StartedAt,
			&i.FinishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
