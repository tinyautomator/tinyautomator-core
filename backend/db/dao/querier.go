// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package dao

import (
	"context"
)

type Querier interface {
	//ArchiveWorkflow
	//
	//  UPDATE workflow
	//  SET status = $2,
	//      updated_at = $3
	//  WHERE id = $1
	ArchiveWorkflow(ctx context.Context, arg *ArchiveWorkflowParams) error
	//CompleteWorkflowRun
	//
	//  UPDATE workflow_run
	//  SET status = $2,
	//      finished_at = $3
	//  WHERE id = $1
	CompleteWorkflowRun(ctx context.Context, arg *CompleteWorkflowRunParams) error
	//CreateOauthIntegration
	//
	//  INSERT INTO oauth_integration (
	//      user_id,
	//      provider,
	//      provider_user_id,
	//      access_token,
	//      refresh_token,
	//      expires_at,
	//      scopes,
	//      created_at,
	//      updated_at,
	//      additional_parameters
	//  ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
	//  RETURNING id, user_id, provider, provider_user_id, access_token, refresh_token, expires_at, scopes, created_at, updated_at, additional_parameters
	CreateOauthIntegration(ctx context.Context, arg *CreateOauthIntegrationParams) (*OauthIntegration, error)
	//CreateWorkflow
	//
	//  INSERT INTO workflow (
	//    user_id,
	//    name,
	//    description,
	//    status,
	//    created_at,
	//    updated_at
	//  )
	//  VALUES (
	//    $1, $2, $3, $4, $5, $6
	//  )
	//  RETURNING id, user_id, name, description, status, created_at, updated_at
	CreateWorkflow(ctx context.Context, arg *CreateWorkflowParams) (*Workflow, error)
	//CreateWorkflowCalendar
	//
	//  INSERT INTO workflow_calendar (
	//      workflow_id,
	//      config,
	//      sync_token,
	//      execution_state,
	//      last_synced_at,
	//      created_at,
	//      updated_at
	//  )
	//  VALUES ($1, $2, $3, $4, $5, $6, $7)
	//  RETURNING id, workflow_id, config, sync_token, execution_state, last_synced_at, created_at, updated_at
	CreateWorkflowCalendar(ctx context.Context, arg *CreateWorkflowCalendarParams) (*WorkflowCalendar, error)
	//CreateWorkflowEdge
	//
	//  INSERT INTO workflow_edge (
	//    workflow_id,
	//    source_node_id,
	//    target_node_id
	//  )
	//  VALUES (
	//    $1, $2, $3
	//  )
	//  RETURNING workflow_id, source_node_id, target_node_id
	CreateWorkflowEdge(ctx context.Context, arg *CreateWorkflowEdgeParams) (*WorkflowEdge, error)
	//CreateWorkflowNode
	//
	//  INSERT INTO workflow_node (
	//    workflow_id,
	//    category,
	//    node_type,
	//    config
	//  )
	//  VALUES (
	//    $1, $2, $3, $4
	//  )
	//  RETURNING id, workflow_id, category, node_type, config
	CreateWorkflowNode(ctx context.Context, arg *CreateWorkflowNodeParams) (*WorkflowNode, error)
	//CreateWorkflowNodeRun
	//
	//  INSERT INTO workflow_node_run (
	//    workflow_run_id,
	//    workflow_node_id,
	//    status,
	//    metadata
	//  )
	//  VALUES ($1, $2, $3, $4)
	//  ON CONFLICT (workflow_run_id, workflow_node_id) DO NOTHING
	//  RETURNING id, workflow_run_id, workflow_node_id, status, retry_count, started_at, finished_at, metadata, error_message
	CreateWorkflowNodeRun(ctx context.Context, arg *CreateWorkflowNodeRunParams) (*WorkflowNodeRun, error)
	//CreateWorkflowNodeUi
	//
	//  INSERT INTO workflow_node_ui (
	//    id,
	//    x_position,
	//    y_position
	//  )
	//  VALUES (
	//    $1, $2, $3
	//  )
	//  RETURNING id, x_position, y_position
	CreateWorkflowNodeUi(ctx context.Context, arg *CreateWorkflowNodeUiParams) (*WorkflowNodeUi, error)
	//CreateWorkflowRun
	//
	//  INSERT INTO workflow_run (
	//    workflow_id, status, created_at
	//  ) VALUES (
	//    $1, 'running', $2
	//  )
	//  RETURNING id, workflow_id, status, finished_at, created_at
	CreateWorkflowRun(ctx context.Context, arg *CreateWorkflowRunParams) (*WorkflowRun, error)
	//CreateWorkflowSchedule
	//
	//  INSERT INTO workflow_schedule (
	//    workflow_id,
	//    schedule_type,
	//    next_run_at,
	//    last_run_at,
	//    execution_state,
	//    created_at,
	//    updated_at
	//  )
	//  VALUES ($1, $2, $3, $4, $5, $6, $7)
	//  RETURNING id, workflow_id, schedule_type, next_run_at, last_run_at, execution_state, created_at, updated_at
	CreateWorkflowSchedule(ctx context.Context, arg *CreateWorkflowScheduleParams) (*WorkflowSchedule, error)
	//DeleteOauthIntegrationByUserID
	//
	//  DELETE FROM oauth_integration
	//  WHERE user_id = $1
	DeleteOauthIntegrationByUserID(ctx context.Context, userID string) error
	//DeleteWorkflowEdge
	//
	//  DELETE FROM workflow_edge
	//  WHERE workflow_id = $1
	//    AND source_node_id = $2
	//    AND target_node_id = $3
	DeleteWorkflowEdge(ctx context.Context, arg *DeleteWorkflowEdgeParams) error
	//DeleteWorkflowNode
	//
	//  DELETE FROM workflow_node
	//  WHERE id = $1
	DeleteWorkflowNode(ctx context.Context, id int32) error
	//DeleteWorkflowSchedule
	//
	//  DELETE FROM workflow_schedule
	//  WHERE id = $1
	DeleteWorkflowSchedule(ctx context.Context, id int32) error
	//DeleteWorkflowScheduleByWorkflowID
	//
	//  DELETE FROM workflow_schedule WHERE workflow_id = $1
	DeleteWorkflowScheduleByWorkflowID(ctx context.Context, workflowID int32) error
	//GetActiveWorkflowCalendarsLocked
	//
	//  WITH locked AS (
	//    SELECT
	//      wc.id,
	//      w.user_id
	//    FROM workflow_calendar wc
	//    INNER JOIN workflow w ON wc.workflow_id = w.id
	//    WHERE wc.execution_state = 'queued'
	//      AND wc.last_synced_at IS NOT NULL
	//      AND wc.last_synced_at <= extract(epoch from now()) * 1000
	//    FOR UPDATE OF wc SKIP LOCKED
	//    LIMIT $1
	//  )
	//  UPDATE workflow_calendar
	//  SET execution_state = 'running'
	//  FROM locked
	//  WHERE workflow_calendar.id = locked.id
	//  RETURNING workflow_calendar.id, workflow_calendar.workflow_id, workflow_calendar.config, workflow_calendar.sync_token, workflow_calendar.execution_state, workflow_calendar.last_synced_at, workflow_calendar.created_at, workflow_calendar.updated_at, locked.user_id
	GetActiveWorkflowCalendarsLocked(ctx context.Context, limit int32) ([]*GetActiveWorkflowCalendarsLockedRow, error)
	//GetChildWorkflowNodeRuns
	//
	//  SELECT wnr.id, wnr.workflow_run_id, wnr.workflow_node_id, wnr.status, wnr.retry_count, wnr.started_at, wnr.finished_at, wnr.metadata, wnr.error_message
	//  FROM workflow_node_run wnr
	//  INNER JOIN workflow_edge we ON wnr.workflow_node_id = we.target_node_id
	//  WHERE workflow_run_id = $1
	//  AND source_node_id = $2
	GetChildWorkflowNodeRuns(ctx context.Context, arg *GetChildWorkflowNodeRunsParams) ([]*WorkflowNodeRun, error)
	//GetDueSchedulesLocked
	//
	//  WITH locked AS (
	//    SELECT
	//      ws.id,
	//      w.user_id
	//    FROM workflow_schedule ws
	//    INNER JOIN workflow w ON ws.workflow_id = w.id
	//    WHERE ws.execution_state = 'queued'
	//      AND ws.next_run_at IS NOT NULL
	//      AND ws.next_run_at <= extract(epoch from now()) * 1000
	//    FOR UPDATE OF ws SKIP LOCKED
	//    LIMIT $1
	//  )
	//  UPDATE workflow_schedule
	//  SET execution_state = 'running'
	//  FROM locked
	//  WHERE workflow_schedule.id = locked.id
	//  RETURNING workflow_schedule.id, workflow_schedule.workflow_id, workflow_schedule.schedule_type, workflow_schedule.next_run_at, workflow_schedule.last_run_at, workflow_schedule.execution_state, workflow_schedule.created_at, workflow_schedule.updated_at, locked.user_id
	GetDueSchedulesLocked(ctx context.Context, limit int32) ([]*GetDueSchedulesLockedRow, error)
	//GetOauthIntegrationByID
	//
	//  SELECT id, user_id, provider, provider_user_id, access_token, refresh_token, expires_at, scopes, created_at, updated_at, additional_parameters FROM oauth_integration
	//  WHERE id = $1
	//  LIMIT 1
	GetOauthIntegrationByID(ctx context.Context, id int32) (*OauthIntegration, error)
	//GetOauthIntegrationByProviderAndProviderUserID
	//
	//  SELECT id, user_id, provider, provider_user_id, access_token, refresh_token, expires_at, scopes, created_at, updated_at, additional_parameters FROM oauth_integration
	//  WHERE provider = $1 AND provider_user_id = $2
	//  LIMIT 1
	GetOauthIntegrationByProviderAndProviderUserID(ctx context.Context, arg *GetOauthIntegrationByProviderAndProviderUserIDParams) (*OauthIntegration, error)
	//GetOauthIntegrationsByUserID
	//
	//  SELECT id, user_id, provider, provider_user_id, access_token, refresh_token, expires_at, scopes, created_at, updated_at, additional_parameters FROM oauth_integration
	//  WHERE user_id = $1
	//  ORDER BY created_at DESC
	GetOauthIntegrationsByUserID(ctx context.Context, userID string) ([]*OauthIntegration, error)
	//GetParentWorkflowNodeRuns
	//
	//  SELECT wnr.id, wnr.workflow_run_id, wnr.workflow_node_id, wnr.status, wnr.retry_count, wnr.started_at, wnr.finished_at, wnr.metadata, wnr.error_message
	//  FROM workflow_node_run wnr
	//  INNER JOIN workflow_edge we ON wnr.workflow_node_id = we.source_node_id
	//  WHERE workflow_run_id = $1
	//  AND target_node_id = $2
	GetParentWorkflowNodeRuns(ctx context.Context, arg *GetParentWorkflowNodeRunsParams) ([]*WorkflowNodeRun, error)
	//GetUserWorkflowRuns
	//
	//  SELECT
	//    w.id as workflow_id,
	//    w.name as workflow_name,
	//    wr.id as workflow_run_id,
	//    wr.status as workflow_run_status,
	//    wr.created_at as workflow_run_created_at,
	//    wr.finished_at as workflow_run_finished_at
	//  FROM workflow_run wr
	//  INNER JOIN workflow w ON wr.workflow_id = w.id
	//  WHERE w.user_id = $1
	//  ORDER BY wr.created_at DESC
	//  LIMIT 25
	GetUserWorkflowRuns(ctx context.Context, userID string) ([]*GetUserWorkflowRunsRow, error)
	//GetUserWorkflows
	//
	//  SELECT id, user_id, name, description, status, created_at, updated_at
	//  FROM workflow
	//  WHERE user_id = $1
	GetUserWorkflows(ctx context.Context, userID string) ([]*Workflow, error)
	//GetWorkflow
	//
	//  SELECT id, user_id, name, description, status, created_at, updated_at
	//  FROM workflow
	//  WHERE id = $1
	GetWorkflow(ctx context.Context, id int32) (*Workflow, error)
	//GetWorkflowGraph
	//
	//  SELECT
	//    w.id AS workflow_id,
	//    w.name AS workflow_name,
	//    w.description AS workflow_description,
	//    w.status AS workflow_status,
	//    w.created_at,
	//    wn.id AS node_id,
	//    category,
	//    node_type,
	//    config,
	//    source_node_id,
	//    target_node_id
	//  FROM workflow w
	//  INNER JOIN workflow_node wn ON w.id = wn.workflow_id
	//  LEFT JOIN workflow_edge we ON w.id = we.workflow_id
	//    AND we.source_node_id = wn.id
	//  WHERE w.id = $1
	GetWorkflowGraph(ctx context.Context, id int32) ([]*GetWorkflowGraphRow, error)
	//GetWorkflowNode
	//
	//  SELECT id, workflow_id, category, node_type, config
	//  FROM workflow_node
	//  WHERE id = $1
	GetWorkflowNode(ctx context.Context, id int32) (*WorkflowNode, error)
	//GetWorkflowNodeRunByWorkflowRunIDAndNodeID
	//
	//  SELECT id, workflow_run_id, workflow_node_id, status, retry_count, started_at, finished_at, metadata, error_message
	//  FROM workflow_node_run
	//  WHERE workflow_run_id = $1
	//    AND workflow_node_id = $2
	GetWorkflowNodeRunByWorkflowRunIDAndNodeID(ctx context.Context, arg *GetWorkflowNodeRunByWorkflowRunIDAndNodeIDParams) (*WorkflowNodeRun, error)
	//GetWorkflowNodeRunsByRunID
	//
	//  SELECT id, workflow_run_id, workflow_node_id, status, retry_count, started_at, finished_at, metadata, error_message
	//  FROM workflow_node_run
	//  WHERE workflow_run_id = $1
	//  ORDER BY started_at ASC
	GetWorkflowNodeRunsByRunID(ctx context.Context, workflowRunID int32) ([]*WorkflowNodeRun, error)
	//GetWorkflowRunWithNodeRuns
	//
	//  SELECT
	//    wr.id AS workflow_run_id,
	//    wr.workflow_id,
	//    wr.status AS workflow_run_status,
	//    wr.finished_at AS workflow_run_finished_at,
	//    wr.created_at AS workflow_run_created_at,
	//    wnr.id AS node_run_id,
	//    wnr.workflow_node_id,
	//    wnr.status AS node_run_status,
	//    wnr.started_at AS node_run_started_at,
	//    wnr.finished_at AS node_run_finished_at,
	//    wnr.metadata,
	//    wnr.error_message
	//  FROM workflow_run wr
	//  INNER JOIN workflow_node_run wnr ON wr.id = wnr.workflow_run_id
	//  WHERE wr.id = $1
	GetWorkflowRunWithNodeRuns(ctx context.Context, id int32) ([]*GetWorkflowRunWithNodeRunsRow, error)
	//ListWorkflowRuns
	//
	//  SELECT id, workflow_id, status, finished_at, created_at
	//  FROM workflow_run
	//  WHERE workflow_id = $1
	//  ORDER BY created_at DESC
	//  LIMIT 25
	ListWorkflowRuns(ctx context.Context, workflowID int32) ([]*WorkflowRun, error)
	//MarkWorkflowNodeAsRunning
	//
	//  UPDATE workflow_node_run
	//  SET status = 'running',
	//      started_at = $2,
	//      retry_count = $3
	//  WHERE id = $1
	MarkWorkflowNodeAsRunning(ctx context.Context, arg *MarkWorkflowNodeAsRunningParams) error
	//RenderWorkflowGraph
	//
	//  SELECT
	//    w.id AS workflow_id,
	//    w.name AS workflow_name,
	//    w.description AS workflow_description,
	//    w.status AS workflow_status,
	//    w.created_at,
	//    wn.id AS node_id,
	//    wnu.x_position,
	//    wnu.y_position,
	//    category,
	//    node_type,
	//    config,
	//    source_node_id,
	//    target_node_id
	//  FROM workflow w
	//  INNER JOIN workflow_node wn ON w.id = wn.workflow_id
	//  INNER JOIN workflow_node_ui wnu ON wn.id = wnu.id
	//  LEFT JOIN workflow_edge we ON w.id = we.workflow_id
	//    AND we.source_node_id = wn.id
	//  WHERE w.id = $1
	RenderWorkflowGraph(ctx context.Context, id int32) ([]*RenderWorkflowGraphRow, error)
	//UpdateOauthIntegration
	//
	//  UPDATE oauth_integration
	//  SET
	//      access_token = $2,
	//      refresh_token = $3,
	//      expires_at = $4,
	//      scopes = $5,
	//      updated_at = $6,
	//      additional_parameters = $7
	//  WHERE id = $1
	//  RETURNING id, user_id, provider, provider_user_id, access_token, refresh_token, expires_at, scopes, created_at, updated_at, additional_parameters
	UpdateOauthIntegration(ctx context.Context, arg *UpdateOauthIntegrationParams) (*OauthIntegration, error)
	//UpdateWorkflow
	//
	//  UPDATE workflow
	//  SET name = $2,
	//      description = $3,
	//      updated_at = $4
	//  WHERE id = $1
	UpdateWorkflow(ctx context.Context, arg *UpdateWorkflowParams) error
	//UpdateWorkflowCalendar
	//
	//  UPDATE workflow_calendar
	//  SET config = $2,
	//      sync_token = $3,
	//      execution_state = $4,
	//      last_synced_at = $5,
	//      updated_at = $6
	//  WHERE workflow_id = $1
	UpdateWorkflowCalendar(ctx context.Context, arg *UpdateWorkflowCalendarParams) error
	//UpdateWorkflowNode
	//
	//  UPDATE workflow_node
	//  SET config = $2
	//  WHERE id = $1
	UpdateWorkflowNode(ctx context.Context, arg *UpdateWorkflowNodeParams) error
	//UpdateWorkflowNodeRun
	//
	//  UPDATE workflow_node_run
	//  SET status = $2,
	//      finished_at = $3,
	//      metadata = $4,
	//      error_message = $5
	//  WHERE id = $1
	UpdateWorkflowNodeRun(ctx context.Context, arg *UpdateWorkflowNodeRunParams) error
	//UpdateWorkflowNodeUI
	//
	//  UPDATE workflow_node_ui
	//  SET x_position = $2,
	//      y_position = $3
	//  WHERE id = $1
	UpdateWorkflowNodeUI(ctx context.Context, arg *UpdateWorkflowNodeUIParams) error
	//UpdateWorkflowSchedule
	//
	//  UPDATE workflow_schedule
	//  SET schedule_type = $1,
	//      next_run_at = $2,
	//      last_run_at = $3,
	//      execution_state = $4,
	//      updated_at = $5
	//  WHERE workflow_id = $6
	UpdateWorkflowSchedule(ctx context.Context, arg *UpdateWorkflowScheduleParams) error
}

var _ Querier = (*Queries)(nil)
