// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package dao

import (
	"context"
)

type Querier interface {
	//CompleteWorkflowNodeRun
	//
	//  UPDATE workflow_node_run
	//  SET status = $2,
	//      finished_at = $3,
	//      metadata = $4,
	//      error_message = $5
	//  WHERE id = $1
	CompleteWorkflowNodeRun(ctx context.Context, arg *CompleteWorkflowNodeRunParams) error
	//CompleteWorkflowRun
	//
	//  UPDATE workflow_run
	//  SET status = $2,
	//      finished_at = $3
	//  WHERE id = $1
	CompleteWorkflowRun(ctx context.Context, arg *CompleteWorkflowRunParams) error
	//CreateWorkflow
	//
	//  INSERT INTO workflow (
	//    user_id,
	//    name,
	//    description,
	//    status,
	//    created_at,
	//    updated_at
	//  )
	//  VALUES (
	//    $1, $2, $3, $4, $5, $6
	//  )
	//  RETURNING id, user_id, name, description, status, created_at, updated_at
	CreateWorkflow(ctx context.Context, arg *CreateWorkflowParams) (*Workflow, error)
	//CreateWorkflowEdge
	//
	//  INSERT INTO workflow_edge (
	//    workflow_id,
	//    source_node_id,
	//    target_node_id
	//  )
	//  VALUES (
	//    $1, $2, $3
	//  )
	//  RETURNING workflow_id, source_node_id, target_node_id
	CreateWorkflowEdge(ctx context.Context, arg *CreateWorkflowEdgeParams) (*WorkflowEdge, error)
	//CreateWorkflowNode
	//
	//  INSERT INTO workflow_node (
	//    workflow_id,
	//    action_type,
	//    config
	//  )
	//  VALUES (
	//    $1, $2, $3
	//  )
	//  RETURNING id, workflow_id, action_type, config
	CreateWorkflowNode(ctx context.Context, arg *CreateWorkflowNodeParams) (*WorkflowNode, error)
	//CreateWorkflowNodeRun
	//
	//  INSERT INTO workflow_node_run (
	//    workflow_run_id,
	//    workflow_node_id,
	//    status,
	//    started_at,
	//    metadata,
	//    created_at,
	//    updated_at
	//  )
	//  VALUES ($1, $2, 'running', $3, $4, $5, $6)
	//  ON CONFLICT (workflow_run_id, workflow_node_id) DO NOTHING
	//  RETURNING id
	CreateWorkflowNodeRun(ctx context.Context, arg *CreateWorkflowNodeRunParams) (int32, error)
	//CreateWorkflowNodeUi
	//
	//  INSERT INTO workflow_node_ui (
	//    id,
	//    x_position,
	//    y_position
	//  )
	//  VALUES (
	//    $1, $2, $3
	//  )
	//  RETURNING id, x_position, y_position
	CreateWorkflowNodeUi(ctx context.Context, arg *CreateWorkflowNodeUiParams) (*WorkflowNodeUi, error)
	//CreateWorkflowRun
	//
	//  INSERT INTO workflow_run (
	//    workflow_id, status, started_at, created_at, updated_at
	//  ) VALUES (
	//    $1, 'running', $2, $3, $4
	//  )
	//  RETURNING id, workflow_id, status, started_at, finished_at, created_at, updated_at
	CreateWorkflowRun(ctx context.Context, arg *CreateWorkflowRunParams) (*WorkflowRun, error)
	//CreateWorkflowSchedule
	//
	//  INSERT INTO workflow_schedule (
	//    workflow_id,
	//    schedule_type,
	//    next_run_at,
	//    last_run_at,
	//    execution_state,
	//    created_at,
	//    updated_at
	//  )
	//  VALUES ($1, $2, $3, $4, $5, $6, $7)
	//  RETURNING id, workflow_id, schedule_type, next_run_at, last_run_at, execution_state, created_at, updated_at
	CreateWorkflowSchedule(ctx context.Context, arg *CreateWorkflowScheduleParams) (*WorkflowSchedule, error)
	//DeleteWorkflowEdge
	//
	//  DELETE FROM workflow_edge
	//  WHERE workflow_id = $1
	//    AND source_node_id = $2
	//    AND target_node_id = $3
	DeleteWorkflowEdge(ctx context.Context, arg *DeleteWorkflowEdgeParams) error
	//DeleteWorkflowNode
	//
	//  DELETE FROM workflow_node
	//  WHERE id = $1
	DeleteWorkflowNode(ctx context.Context, id int32) error
	//DeleteWorkflowSchedule
	//
	//  DELETE FROM workflow_schedule
	//  WHERE id = $1
	DeleteWorkflowSchedule(ctx context.Context, id int32) error
	//GetChildNodeIDs
	//
	//  SELECT target_node_id
	//  FROM workflow_edge
	//  WHERE source_node_id = $1
	GetChildNodeIDs(ctx context.Context, sourceNodeID int32) ([]int32, error)
	//GetDueSchedulesLocked
	//
	//  WITH locked AS (
	//    SELECT id
	//    FROM workflow_schedule
	//    WHERE execution_state = 'queued'
	//      AND next_run_at IS NOT NULL
	//      AND next_run_at <=  extract(epoch from now()) * 1000
	//    FOR UPDATE SKIP LOCKED
	//    LIMIT $1
	//  )
	//  UPDATE workflow_schedule
	//  SET status = 'running'
	//  FROM locked
	//  WHERE workflow_schedule.id = locked.id
	//  RETURNING locked.id, workflow_schedule.id, workflow_id, schedule_type, next_run_at, last_run_at, execution_state, created_at, updated_at
	GetDueSchedulesLocked(ctx context.Context, limit int32) ([]*GetDueSchedulesLockedRow, error)
	//GetUserWorkflows
	//
	//  SELECT id, user_id, name, description, status, created_at, updated_at
	//  FROM workflow
	//  WHERE user_id = $1
	GetUserWorkflows(ctx context.Context, userID string) ([]*Workflow, error)
	//GetWorkflow
	//
	//  SELECT id, user_id, name, description, status, created_at, updated_at
	//  FROM workflow
	//  WHERE id = $1
	GetWorkflow(ctx context.Context, id int32) (*Workflow, error)
	//GetWorkflowGraph
	//
	//  SELECT
	//    w.id AS workflow_id,
	//    w.name AS workflow_name,
	//    w.description AS workflow_description,
	//    w.status AS workflow_status,
	//    w.created_at,
	//    wn.id AS node_id,
	//    action_type,
	//    config,
	//    source_node_id,
	//    target_node_id
	//  FROM workflow w
	//  INNER JOIN workflow_node wn ON w.id = wn.workflow_id
	//  LEFT JOIN workflow_edge we ON w.id = we.workflow_id
	//    AND we.source_node_id = wn.id
	//  WHERE w.id = $1
	GetWorkflowGraph(ctx context.Context, id int32) ([]*GetWorkflowGraphRow, error)
	//GetWorkflowNodeRun
	//
	//  SELECT id, workflow_run_id, workflow_node_id, status, started_at, finished_at, metadata, error_message, created_at, updated_at
	//  FROM workflow_node_run
	//  WHERE id = $1
	GetWorkflowNodeRun(ctx context.Context, id int32) (*WorkflowNodeRun, error)
	//GetWorkflowNodeRunsByRunID
	//
	//  SELECT id, workflow_run_id, workflow_node_id, status, started_at, finished_at, metadata, error_message, created_at, updated_at
	//  FROM workflow_node_run
	//  WHERE workflow_run_id = $1
	//  ORDER BY started_at ASC
	GetWorkflowNodeRunsByRunID(ctx context.Context, workflowRunID int32) ([]*WorkflowNodeRun, error)
	//GetWorkflowRun
	//
	//  SELECT id, workflow_id, status, started_at, finished_at, created_at, updated_at FROM workflow_run
	//  WHERE id = $1
	GetWorkflowRun(ctx context.Context, id int32) (*WorkflowRun, error)
	//ListWorkflowRuns
	//
	//  SELECT id, workflow_id, status, started_at, finished_at, created_at, updated_at
	//  FROM workflow_run
	//  WHERE workflow_id = $1
	//  ORDER BY started_at DESC
	//  LIMIT 25
	ListWorkflowRuns(ctx context.Context, workflowID int32) ([]*WorkflowRun, error)
	//RenderWorkflowGraph
	//
	//  SELECT
	//    w.id AS workflow_id,
	//    w.name AS workflow_name,
	//    w.description AS workflow_description,
	//    w.status AS workflow_status,
	//    w.created_at,
	//    wn.id AS node_id,
	//    wnu.x_position,
	//    wnu.y_position,
	//    action_type,
	//    config,
	//    source_node_id,
	//    target_node_id
	//  FROM workflow w
	//  INNER JOIN workflow_node wn ON w.id = wn.workflow_id
	//  INNER JOIN workflow_node_ui wnu ON wn.id = wnu.id
	//  LEFT JOIN workflow_edge we ON w.id = we.workflow_id
	//    AND we.source_node_id = wn.id
	//  WHERE w.id = $1
	RenderWorkflowGraph(ctx context.Context, id int32) ([]*RenderWorkflowGraphRow, error)
	//UpdateWorkflow
	//
	//  UPDATE workflow
	//  SET name = $2,
	//      description = $3,
	//      updated_at = $4
	//  WHERE id = $1
	UpdateWorkflow(ctx context.Context, arg *UpdateWorkflowParams) error
	//UpdateWorkflowNode
	//
	//  UPDATE workflow_node
	//  SET action_type = $2,
	//      config = $3
	//  WHERE id = $1
	UpdateWorkflowNode(ctx context.Context, arg *UpdateWorkflowNodeParams) error
	//UpdateWorkflowNodeUI
	//
	//  UPDATE workflow_node_ui
	//  SET x_position = $2,
	//      y_position = $3
	//  WHERE id = $1
	UpdateWorkflowNodeUI(ctx context.Context, arg *UpdateWorkflowNodeUIParams) error
	//UpdateWorkflowSchedule
	//
	//  UPDATE workflow_schedule
	//  SET next_run_at = $1,
	//      last_run_at = $2,
	//      updated_at = $3,
	//      execution_state = $4
	//  WHERE id = $5
	UpdateWorkflowSchedule(ctx context.Context, arg *UpdateWorkflowScheduleParams) error
}

var _ Querier = (*Queries)(nil)
