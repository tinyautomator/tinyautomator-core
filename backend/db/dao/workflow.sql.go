// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workflow.sql

package dao

import (
	"context"

	null "github.com/guregu/null/v6"
)

const createWorkflow = `-- name: CreateWorkflow :one
INSERT INTO workflow (
  name,
  description,
  created_at,
  updated_at
)
VALUES (
  ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, user_id, name, description, is_active, created_at, updated_at, last_run_at
`

type CreateWorkflowParams struct {
	Name        string      `json:"name"`
	Description null.String `json:"description"`
}

// CreateWorkflow
//
//	INSERT INTO workflow (
//	  name,
//	  description,
//	  created_at,
//	  updated_at
//	)
//	VALUES (
//	  ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
//	)
//	RETURNING id, user_id, name, description, is_active, created_at, updated_at, last_run_at
func (q *Queries) CreateWorkflow(ctx context.Context, arg *CreateWorkflowParams) (*Workflow, error) {
	row := q.db.QueryRowContext(ctx, createWorkflow, arg.Name, arg.Description)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastRunAt,
	)
	return &i, err
}

const getWorkflow = `-- name: GetWorkflow :one
SELECT id, user_id, name, description, is_active, created_at, updated_at, last_run_at FROM workflow
WHERE id = ?
`

// GetWorkflow
//
//	SELECT id, user_id, name, description, is_active, created_at, updated_at, last_run_at FROM workflow
//	WHERE id = ?
func (q *Queries) GetWorkflow(ctx context.Context, id int64) (*Workflow, error) {
	row := q.db.QueryRowContext(ctx, getWorkflow, id)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastRunAt,
	)
	return &i, err
}

const getWorkflowEdges = `-- name: GetWorkflowEdges :many
SELECT workflow_id, source_node_id, target_node_id
FROM workflow_edge
WHERE workflow_id = ?
`

// GetWorkflowEdges
//
//	SELECT workflow_id, source_node_id, target_node_id
//	FROM workflow_edge
//	WHERE workflow_id = ?
func (q *Queries) GetWorkflowEdges(ctx context.Context, workflowID int64) ([]*WorkflowEdge, error) {
	rows, err := q.db.QueryContext(ctx, getWorkflowEdges, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WorkflowEdge
	for rows.Next() {
		var i WorkflowEdge
		if err := rows.Scan(&i.WorkflowID, &i.SourceNodeID, &i.TargetNodeID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkflowNodes = `-- name: GetWorkflowNodes :many
SELECT id, workflow_id, name, type, category, service, config
FROM workflow_node
WHERE workflow_id = ?
`

// GetWorkflowNodes
//
//	SELECT id, workflow_id, name, type, category, service, config
//	FROM workflow_node
//	WHERE workflow_id = ?
func (q *Queries) GetWorkflowNodes(ctx context.Context, workflowID int64) ([]*WorkflowNode, error) {
	rows, err := q.db.QueryContext(ctx, getWorkflowNodes, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WorkflowNode
	for rows.Next() {
		var i WorkflowNode
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.Name,
			&i.Type,
			&i.Category,
			&i.Service,
			&i.Config,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
