// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workflow.sql

package dao

import (
	"context"

	null "github.com/guregu/null/v6"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkflow = `-- name: CreateWorkflow :one
INSERT INTO workflow (
  user_id,
  name,
  description,
  created_at,
  updated_at
)
VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, name, description, created_at, updated_at
`

type CreateWorkflowParams struct {
	UserID      string      `json:"user_id"`
	Name        string      `json:"name"`
	Description null.String `json:"description"`
	CreatedAt   null.Int    `json:"created_at"`
	UpdatedAt   null.Int    `json:"updated_at"`
}

// CreateWorkflow
//
//	INSERT INTO workflow (
//	  user_id,
//	  name,
//	  description,
//	  created_at,
//	  updated_at
//	)
//	VALUES (
//	  $1, $2, $3, $4, $5
//	)
//	RETURNING id, user_id, name, description, created_at, updated_at
func (q *Queries) CreateWorkflow(ctx context.Context, arg *CreateWorkflowParams) (*Workflow, error) {
	row := q.db.QueryRow(ctx, createWorkflow,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createWorkflowEdge = `-- name: CreateWorkflowEdge :one
INSERT INTO workflow_edge (
  workflow_id,
  source_node_id,
  target_node_id
)
VALUES (
  $1, $2, $3
)
RETURNING workflow_id, source_node_id, target_node_id
`

type CreateWorkflowEdgeParams struct {
	WorkflowID   int32 `json:"workflow_id"`
	SourceNodeID int32 `json:"source_node_id"`
	TargetNodeID int32 `json:"target_node_id"`
}

// CreateWorkflowEdge
//
//	INSERT INTO workflow_edge (
//	  workflow_id,
//	  source_node_id,
//	  target_node_id
//	)
//	VALUES (
//	  $1, $2, $3
//	)
//	RETURNING workflow_id, source_node_id, target_node_id
func (q *Queries) CreateWorkflowEdge(ctx context.Context, arg *CreateWorkflowEdgeParams) (*WorkflowEdge, error) {
	row := q.db.QueryRow(ctx, createWorkflowEdge, arg.WorkflowID, arg.SourceNodeID, arg.TargetNodeID)
	var i WorkflowEdge
	err := row.Scan(&i.WorkflowID, &i.SourceNodeID, &i.TargetNodeID)
	return &i, err
}

const createWorkflowNode = `-- name: CreateWorkflowNode :one
INSERT INTO workflow_node (
  workflow_id,
  action_type,
  config
)
VALUES (
  $1, $2, $3
)
RETURNING id, workflow_id, action_type, config
`

type CreateWorkflowNodeParams struct {
	WorkflowID int32  `json:"workflow_id"`
	ActionType string `json:"action_type"`
	Config     []byte `json:"config"`
}

// CreateWorkflowNode
//
//	INSERT INTO workflow_node (
//	  workflow_id,
//	  action_type,
//	  config
//	)
//	VALUES (
//	  $1, $2, $3
//	)
//	RETURNING id, workflow_id, action_type, config
func (q *Queries) CreateWorkflowNode(ctx context.Context, arg *CreateWorkflowNodeParams) (*WorkflowNode, error) {
	row := q.db.QueryRow(ctx, createWorkflowNode, arg.WorkflowID, arg.ActionType, arg.Config)
	var i WorkflowNode
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.ActionType,
		&i.Config,
	)
	return &i, err
}

const createWorkflowNodeUi = `-- name: CreateWorkflowNodeUi :one
INSERT INTO workflow_node_ui (
  id,
  x_position,
  y_position,
  node_label,
  node_type
)
VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, x_position, y_position, node_label, node_type
`

type CreateWorkflowNodeUiParams struct {
	ID        int32       `json:"id"`
	XPosition float64     `json:"x_position"`
	YPosition float64     `json:"y_position"`
	NodeLabel null.String `json:"node_label"`
	NodeType  string      `json:"node_type"`
}

// CreateWorkflowNodeUi
//
//	INSERT INTO workflow_node_ui (
//	  id,
//	  x_position,
//	  y_position,
//	  node_label,
//	  node_type
//	)
//	VALUES (
//	  $1, $2, $3, $4, $5
//	)
//	RETURNING id, x_position, y_position, node_label, node_type
func (q *Queries) CreateWorkflowNodeUi(ctx context.Context, arg *CreateWorkflowNodeUiParams) (*WorkflowNodeUi, error) {
	row := q.db.QueryRow(ctx, createWorkflowNodeUi,
		arg.ID,
		arg.XPosition,
		arg.YPosition,
		arg.NodeLabel,
		arg.NodeType,
	)
	var i WorkflowNodeUi
	err := row.Scan(
		&i.ID,
		&i.XPosition,
		&i.YPosition,
		&i.NodeLabel,
		&i.NodeType,
	)
	return &i, err
}

const getWorkflow = `-- name: GetWorkflow :one
SELECT id, user_id, name, description, created_at, updated_at
FROM workflow
WHERE id = $1
`

// GetWorkflow
//
//	SELECT id, user_id, name, description, created_at, updated_at
//	FROM workflow
//	WHERE id = $1
func (q *Queries) GetWorkflow(ctx context.Context, id int32) (*Workflow, error) {
	row := q.db.QueryRow(ctx, getWorkflow, id)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getWorkflowEdges = `-- name: GetWorkflowEdges :many
SELECT workflow_id,
  source_node_id,
  target_node_id
FROM workflow_edge
WHERE workflow_id = $1
`

// GetWorkflowEdges
//
//	SELECT workflow_id,
//	  source_node_id,
//	  target_node_id
//	FROM workflow_edge
//	WHERE workflow_id = $1
func (q *Queries) GetWorkflowEdges(ctx context.Context, workflowID int32) ([]*WorkflowEdge, error) {
	rows, err := q.db.Query(ctx, getWorkflowEdges, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WorkflowEdge
	for rows.Next() {
		var i WorkflowEdge
		if err := rows.Scan(&i.WorkflowID, &i.SourceNodeID, &i.TargetNodeID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkflowGraph = `-- name: GetWorkflowGraph :many
SELECT
  w.id AS workflow_id,
  w.name AS workflow_name,
  w.description AS workflow_description,
  w.created_at,
  wn.id AS node_id,
  action_type,
  config,
  source_node_id,
  target_node_id
FROM workflow w
INNER JOIN workflow_node wn ON w.id = wn.workflow_id
LEFT JOIN workflow_edge we ON w.id = we.workflow_id
  AND we.source_node_id = wn.id
WHERE w.id = $1
`

type GetWorkflowGraphRow struct {
	WorkflowID          int32       `json:"workflow_id"`
	WorkflowName        string      `json:"workflow_name"`
	WorkflowDescription null.String `json:"workflow_description"`
	CreatedAt           null.Int    `json:"created_at"`
	NodeID              int32       `json:"node_id"`
	ActionType          string      `json:"action_type"`
	Config              []byte      `json:"config"`
	SourceNodeID        pgtype.Int4 `json:"source_node_id"`
	TargetNodeID        pgtype.Int4 `json:"target_node_id"`
}

// GetWorkflowGraph
//
//	SELECT
//	  w.id AS workflow_id,
//	  w.name AS workflow_name,
//	  w.description AS workflow_description,
//	  w.created_at,
//	  wn.id AS node_id,
//	  action_type,
//	  config,
//	  source_node_id,
//	  target_node_id
//	FROM workflow w
//	INNER JOIN workflow_node wn ON w.id = wn.workflow_id
//	LEFT JOIN workflow_edge we ON w.id = we.workflow_id
//	  AND we.source_node_id = wn.id
//	WHERE w.id = $1
func (q *Queries) GetWorkflowGraph(ctx context.Context, id int32) ([]*GetWorkflowGraphRow, error) {
	rows, err := q.db.Query(ctx, getWorkflowGraph, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetWorkflowGraphRow
	for rows.Next() {
		var i GetWorkflowGraphRow
		if err := rows.Scan(
			&i.WorkflowID,
			&i.WorkflowName,
			&i.WorkflowDescription,
			&i.CreatedAt,
			&i.NodeID,
			&i.ActionType,
			&i.Config,
			&i.SourceNodeID,
			&i.TargetNodeID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkflowNodes = `-- name: GetWorkflowNodes :many
SELECT id,
  workflow_id,
  action_type,
  config
FROM workflow_node
WHERE workflow_id = $1
`

// GetWorkflowNodes
//
//	SELECT id,
//	  workflow_id,
//	  action_type,
//	  config
//	FROM workflow_node
//	WHERE workflow_id = $1
func (q *Queries) GetWorkflowNodes(ctx context.Context, workflowID int32) ([]*WorkflowNode, error) {
	rows, err := q.db.Query(ctx, getWorkflowNodes, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WorkflowNode
	for rows.Next() {
		var i WorkflowNode
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.ActionType,
			&i.Config,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renderWorkflowGraph = `-- name: RenderWorkflowGraph :many
SELECT
  w.id AS workflow_id,
  w.name AS workflow_name,
  w.description AS workflow_description,
  w.created_at,
  wn.id AS node_id,
  wnu.x_position,
  wnu.y_position,
  wnu.node_label,
  wnu.node_type
  action_type,
  config,
  source_node_id,
  target_node_id
FROM workflow w
INNER JOIN workflow_node wn ON w.id = wn.workflow_id
INNER JOIN workflow_node_ui wnu ON wn.id = wnu.id
LEFT JOIN workflow_edge we ON w.id = we.workflow_id
  AND we.source_node_id = wn.id
WHERE w.id = $1
`

type RenderWorkflowGraphRow struct {
	WorkflowID          int32       `json:"workflow_id"`
	WorkflowName        string      `json:"workflow_name"`
	WorkflowDescription null.String `json:"workflow_description"`
	CreatedAt           null.Int    `json:"created_at"`
	NodeID              int32       `json:"node_id"`
	XPosition           float64     `json:"x_position"`
	YPosition           float64     `json:"y_position"`
	NodeLabel           null.String `json:"node_label"`
	ActionType          string      `json:"action_type"`
	Config              []byte      `json:"config"`
	SourceNodeID        pgtype.Int4 `json:"source_node_id"`
	TargetNodeID        pgtype.Int4 `json:"target_node_id"`
}

// RenderWorkflowGraph
//
//	SELECT
//	  w.id AS workflow_id,
//	  w.name AS workflow_name,
//	  w.description AS workflow_description,
//	  w.created_at,
//	  wn.id AS node_id,
//	  wnu.x_position,
//	  wnu.y_position,
//	  wnu.node_label,
//	  wnu.node_type
//	  action_type,
//	  config,
//	  source_node_id,
//	  target_node_id
//	FROM workflow w
//	INNER JOIN workflow_node wn ON w.id = wn.workflow_id
//	INNER JOIN workflow_node_ui wnu ON wn.id = wnu.id
//	LEFT JOIN workflow_edge we ON w.id = we.workflow_id
//	  AND we.source_node_id = wn.id
//	WHERE w.id = $1
func (q *Queries) RenderWorkflowGraph(ctx context.Context, id int32) ([]*RenderWorkflowGraphRow, error) {
	rows, err := q.db.Query(ctx, renderWorkflowGraph, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RenderWorkflowGraphRow
	for rows.Next() {
		var i RenderWorkflowGraphRow
		if err := rows.Scan(
			&i.WorkflowID,
			&i.WorkflowName,
			&i.WorkflowDescription,
			&i.CreatedAt,
			&i.NodeID,
			&i.XPosition,
			&i.YPosition,
			&i.NodeLabel,
			&i.ActionType,
			&i.Config,
			&i.SourceNodeID,
			&i.TargetNodeID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
