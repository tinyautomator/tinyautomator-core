// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workflow_schedule.sql

package dao

import (
	"context"

	null "github.com/guregu/null/v6"
)

const createWorkflowSchedule = `-- name: CreateWorkflowSchedule :one
INSERT INTO workflow_schedule (
  workflow_id,
  schedule_type,
  next_run_at,
  last_run_at,
  execution_state,
  created_at,
  updated_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, workflow_id, schedule_type, next_run_at, last_run_at, execution_state, created_at, updated_at
`

type CreateWorkflowScheduleParams struct {
	WorkflowID     int32    `json:"workflow_id"`
	ScheduleType   string   `json:"schedule_type"`
	NextRunAt      null.Int `json:"next_run_at"`
	LastRunAt      null.Int `json:"last_run_at"`
	ExecutionState string   `json:"execution_state"`
	CreatedAt      int64    `json:"created_at"`
	UpdatedAt      int64    `json:"updated_at"`
}

// CreateWorkflowSchedule
//
//	INSERT INTO workflow_schedule (
//	  workflow_id,
//	  schedule_type,
//	  next_run_at,
//	  last_run_at,
//	  execution_state,
//	  created_at,
//	  updated_at
//	)
//	VALUES ($1, $2, $3, $4, $5, $6, $7)
//	RETURNING id, workflow_id, schedule_type, next_run_at, last_run_at, execution_state, created_at, updated_at
func (q *Queries) CreateWorkflowSchedule(ctx context.Context, arg *CreateWorkflowScheduleParams) (*WorkflowSchedule, error) {
	row := q.db.QueryRow(ctx, createWorkflowSchedule,
		arg.WorkflowID,
		arg.ScheduleType,
		arg.NextRunAt,
		arg.LastRunAt,
		arg.ExecutionState,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i WorkflowSchedule
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.ScheduleType,
		&i.NextRunAt,
		&i.LastRunAt,
		&i.ExecutionState,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteWorkflowSchedule = `-- name: DeleteWorkflowSchedule :exec
DELETE FROM workflow_schedule
WHERE id = $1
`

// DeleteWorkflowSchedule
//
//	DELETE FROM workflow_schedule
//	WHERE id = $1
func (q *Queries) DeleteWorkflowSchedule(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteWorkflowSchedule, id)
	return err
}

const deleteWorkflowScheduleByWorkflowID = `-- name: DeleteWorkflowScheduleByWorkflowID :exec
DELETE FROM workflow_schedule WHERE workflow_id = $1
`

// DeleteWorkflowScheduleByWorkflowID
//
//	DELETE FROM workflow_schedule WHERE workflow_id = $1
func (q *Queries) DeleteWorkflowScheduleByWorkflowID(ctx context.Context, workflowID int32) error {
	_, err := q.db.Exec(ctx, deleteWorkflowScheduleByWorkflowID, workflowID)
	return err
}

const getDueSchedulesLocked = `-- name: GetDueSchedulesLocked :many
WITH locked AS (
  SELECT
    ws.id,
    w.user_id
  FROM workflow_schedule ws
  INNER JOIN workflow w ON ws.workflow_id = w.id
  WHERE ws.execution_state = 'queued'
    AND ws.next_run_at IS NOT NULL
    AND ws.next_run_at <= extract(epoch from now()) * 1000
  FOR UPDATE OF ws SKIP LOCKED
  LIMIT $1
)
UPDATE workflow_schedule
SET execution_state = 'running'
FROM locked
WHERE workflow_schedule.id = locked.id
RETURNING workflow_schedule.id, workflow_schedule.workflow_id, workflow_schedule.schedule_type, workflow_schedule.next_run_at, workflow_schedule.last_run_at, workflow_schedule.execution_state, workflow_schedule.created_at, workflow_schedule.updated_at, locked.user_id
`

type GetDueSchedulesLockedRow struct {
	ID             int32    `json:"id"`
	WorkflowID     int32    `json:"workflow_id"`
	ScheduleType   string   `json:"schedule_type"`
	NextRunAt      null.Int `json:"next_run_at"`
	LastRunAt      null.Int `json:"last_run_at"`
	ExecutionState string   `json:"execution_state"`
	CreatedAt      int64    `json:"created_at"`
	UpdatedAt      int64    `json:"updated_at"`
	UserID         string   `json:"user_id"`
}

// GetDueSchedulesLocked
//
//	WITH locked AS (
//	  SELECT
//	    ws.id,
//	    w.user_id
//	  FROM workflow_schedule ws
//	  INNER JOIN workflow w ON ws.workflow_id = w.id
//	  WHERE ws.execution_state = 'queued'
//	    AND ws.next_run_at IS NOT NULL
//	    AND ws.next_run_at <= extract(epoch from now()) * 1000
//	  FOR UPDATE OF ws SKIP LOCKED
//	  LIMIT $1
//	)
//	UPDATE workflow_schedule
//	SET execution_state = 'running'
//	FROM locked
//	WHERE workflow_schedule.id = locked.id
//	RETURNING workflow_schedule.id, workflow_schedule.workflow_id, workflow_schedule.schedule_type, workflow_schedule.next_run_at, workflow_schedule.last_run_at, workflow_schedule.execution_state, workflow_schedule.created_at, workflow_schedule.updated_at, locked.user_id
func (q *Queries) GetDueSchedulesLocked(ctx context.Context, limit int32) ([]*GetDueSchedulesLockedRow, error) {
	rows, err := q.db.Query(ctx, getDueSchedulesLocked, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetDueSchedulesLockedRow
	for rows.Next() {
		var i GetDueSchedulesLockedRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.ScheduleType,
			&i.NextRunAt,
			&i.LastRunAt,
			&i.ExecutionState,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkflowSchedule = `-- name: UpdateWorkflowSchedule :exec
UPDATE workflow_schedule
SET schedule_type = $1,
    next_run_at = $2,
    last_run_at = $3,
    execution_state = $4,
    updated_at = $5
WHERE workflow_id = $6
`

type UpdateWorkflowScheduleParams struct {
	ScheduleType   string   `json:"schedule_type"`
	NextRunAt      null.Int `json:"next_run_at"`
	LastRunAt      null.Int `json:"last_run_at"`
	ExecutionState string   `json:"execution_state"`
	UpdatedAt      int64    `json:"updated_at"`
	WorkflowID     int32    `json:"workflow_id"`
}

// UpdateWorkflowSchedule
//
//	UPDATE workflow_schedule
//	SET schedule_type = $1,
//	    next_run_at = $2,
//	    last_run_at = $3,
//	    execution_state = $4,
//	    updated_at = $5
//	WHERE workflow_id = $6
func (q *Queries) UpdateWorkflowSchedule(ctx context.Context, arg *UpdateWorkflowScheduleParams) error {
	_, err := q.db.Exec(ctx, updateWorkflowSchedule,
		arg.ScheduleType,
		arg.NextRunAt,
		arg.LastRunAt,
		arg.ExecutionState,
		arg.UpdatedAt,
		arg.WorkflowID,
	)
	return err
}
