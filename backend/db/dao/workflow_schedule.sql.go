// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workflow_schedule.sql

package dao

import (
	"context"
	"database/sql"
)

const createWorkflowSchedule = `-- name: CreateWorkflowSchedule :one
INSERT INTO workflow_schedule (
        id,
        workflow_id,
        schedule_type,
        next_run_at,
        last_run_at,
        status,
        created_at,
        updated_at
    )
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, workflow_id, schedule_type, next_run_at, last_run_at, status, created_at, updated_at
`

type CreateWorkflowScheduleParams struct {
	ID           string        `json:"id"`
	WorkflowID   int64         `json:"workflow_id"`
	ScheduleType string        `json:"schedule_type"`
	NextRunAt    sql.NullInt64 `json:"next_run_at"`
	LastRunAt    sql.NullInt64 `json:"last_run_at"`
	Status       string        `json:"status"`
	CreatedAt    int64         `json:"created_at"`
	UpdatedAt    int64         `json:"updated_at"`
}

// CreateWorkflowSchedule
//
//	INSERT INTO workflow_schedule (
//	        id,
//	        workflow_id,
//	        schedule_type,
//	        next_run_at,
//	        last_run_at,
//	        status,
//	        created_at,
//	        updated_at
//	    )
//	VALUES (?, ?, ?, ?, ?, ?, ?, ?)
//	RETURNING id, workflow_id, schedule_type, next_run_at, last_run_at, status, created_at, updated_at
func (q *Queries) CreateWorkflowSchedule(ctx context.Context, arg *CreateWorkflowScheduleParams) (*WorkflowSchedule, error) {
	row := q.db.QueryRowContext(ctx, createWorkflowSchedule,
		arg.ID,
		arg.WorkflowID,
		arg.ScheduleType,
		arg.NextRunAt,
		arg.LastRunAt,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i WorkflowSchedule
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.ScheduleType,
		&i.NextRunAt,
		&i.LastRunAt,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteWorkflowSchedule = `-- name: DeleteWorkflowSchedule :exec
DELETE FROM workflow_schedule
WHERE id = ?
`

// DeleteWorkflowSchedule
//
//	DELETE FROM workflow_schedule
//	WHERE id = ?
func (q *Queries) DeleteWorkflowSchedule(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteWorkflowSchedule, id)
	return err
}

const getDueWorkflowSchedules = `-- name: GetDueWorkflowSchedules :many
SELECT id, workflow_id, schedule_type, next_run_at, last_run_at, status, created_at, updated_at
FROM workflow_schedule
WHERE next_run_at IS NOT NULL
    AND next_run_at <= ?
    AND status = 'active'
`

// GetDueWorkflowSchedules
//
//	SELECT id, workflow_id, schedule_type, next_run_at, last_run_at, status, created_at, updated_at
//	FROM workflow_schedule
//	WHERE next_run_at IS NOT NULL
//	    AND next_run_at <= ?
//	    AND status = 'active'
func (q *Queries) GetDueWorkflowSchedules(ctx context.Context, nextRunAt sql.NullInt64) ([]*WorkflowSchedule, error) {
	rows, err := q.db.QueryContext(ctx, getDueWorkflowSchedules, nextRunAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WorkflowSchedule
	for rows.Next() {
		var i WorkflowSchedule
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.ScheduleType,
			&i.NextRunAt,
			&i.LastRunAt,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkflowSchedule = `-- name: UpdateWorkflowSchedule :exec
UPDATE workflow_schedule
SET next_run_at = ?,
    last_run_at = ?,
    updated_at = ?,
    status = ?
WHERE id = ?
`

type UpdateWorkflowScheduleParams struct {
	NextRunAt sql.NullInt64 `json:"next_run_at"`
	LastRunAt sql.NullInt64 `json:"last_run_at"`
	UpdatedAt int64         `json:"updated_at"`
	Status    string        `json:"status"`
	ID        string        `json:"id"`
}

// UpdateWorkflowSchedule
//
//	UPDATE workflow_schedule
//	SET next_run_at = ?,
//	    last_run_at = ?,
//	    updated_at = ?,
//	    status = ?
//	WHERE id = ?
func (q *Queries) UpdateWorkflowSchedule(ctx context.Context, arg *UpdateWorkflowScheduleParams) error {
	_, err := q.db.ExecContext(ctx, updateWorkflowSchedule,
		arg.NextRunAt,
		arg.LastRunAt,
		arg.UpdatedAt,
		arg.Status,
		arg.ID,
	)
	return err
}
