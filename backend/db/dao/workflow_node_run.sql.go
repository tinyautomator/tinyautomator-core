// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workflow_node_run.sql

package dao

import (
	"context"

	null "github.com/guregu/null/v6"
)

const completeWorkflowNodeRun = `-- name: CompleteWorkflowNodeRun :exec
UPDATE workflow_node_run
SET status = $2,
    finished_at = $3,
    metadata = $4,
    error_message = $5
WHERE id = $1
`

type CompleteWorkflowNodeRunParams struct {
	ID           int32       `json:"id"`
	Status       string      `json:"status"`
	FinishedAt   null.Int    `json:"finished_at"`
	Metadata     []byte      `json:"metadata"`
	ErrorMessage null.String `json:"error_message"`
}

// CompleteWorkflowNodeRun
//
//	UPDATE workflow_node_run
//	SET status = $2,
//	    finished_at = $3,
//	    metadata = $4,
//	    error_message = $5
//	WHERE id = $1
func (q *Queries) CompleteWorkflowNodeRun(ctx context.Context, arg *CompleteWorkflowNodeRunParams) error {
	_, err := q.db.Exec(ctx, completeWorkflowNodeRun,
		arg.ID,
		arg.Status,
		arg.FinishedAt,
		arg.Metadata,
		arg.ErrorMessage,
	)
	return err
}

const createWorkflowNodeRun = `-- name: CreateWorkflowNodeRun :one
INSERT INTO workflow_node_run (
  workflow_run_id, workflow_node_id, status, started_at, metadata, created_at, updated_at
) VALUES (
  $1, $2, 'running', $3, $4, $5, $6
)
RETURNING id, workflow_run_id, workflow_node_id, status, started_at, finished_at, metadata, error_message, created_at, updated_at
`

type CreateWorkflowNodeRunParams struct {
	WorkflowRunID  int32  `json:"workflow_run_id"`
	WorkflowNodeID int32  `json:"workflow_node_id"`
	StartedAt      int64  `json:"started_at"`
	Metadata       []byte `json:"metadata"`
	CreatedAt      int64  `json:"created_at"`
	UpdatedAt      int64  `json:"updated_at"`
}

// CreateWorkflowNodeRun
//
//	INSERT INTO workflow_node_run (
//	  workflow_run_id, workflow_node_id, status, started_at, metadata, created_at, updated_at
//	) VALUES (
//	  $1, $2, 'running', $3, $4, $5, $6
//	)
//	RETURNING id, workflow_run_id, workflow_node_id, status, started_at, finished_at, metadata, error_message, created_at, updated_at
func (q *Queries) CreateWorkflowNodeRun(ctx context.Context, arg *CreateWorkflowNodeRunParams) (*WorkflowNodeRun, error) {
	row := q.db.QueryRow(ctx, createWorkflowNodeRun,
		arg.WorkflowRunID,
		arg.WorkflowNodeID,
		arg.StartedAt,
		arg.Metadata,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i WorkflowNodeRun
	err := row.Scan(
		&i.ID,
		&i.WorkflowRunID,
		&i.WorkflowNodeID,
		&i.Status,
		&i.StartedAt,
		&i.FinishedAt,
		&i.Metadata,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getWorkflowNodeRunsByRunID = `-- name: GetWorkflowNodeRunsByRunID :many
SELECT id, workflow_run_id, workflow_node_id, status, started_at, finished_at, metadata, error_message, created_at, updated_at
FROM workflow_node_run
WHERE workflow_run_id = $1
ORDER BY started_at ASC
`

// GetWorkflowNodeRunsByRunID
//
//	SELECT id, workflow_run_id, workflow_node_id, status, started_at, finished_at, metadata, error_message, created_at, updated_at
//	FROM workflow_node_run
//	WHERE workflow_run_id = $1
//	ORDER BY started_at ASC
func (q *Queries) GetWorkflowNodeRunsByRunID(ctx context.Context, workflowRunID int32) ([]*WorkflowNodeRun, error) {
	rows, err := q.db.Query(ctx, getWorkflowNodeRunsByRunID, workflowRunID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WorkflowNodeRun
	for rows.Next() {
		var i WorkflowNodeRun
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowRunID,
			&i.WorkflowNodeID,
			&i.Status,
			&i.StartedAt,
			&i.FinishedAt,
			&i.Metadata,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
