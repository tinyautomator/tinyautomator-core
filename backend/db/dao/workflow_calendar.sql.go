// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workflow_calendar.sql

package dao

import (
	"context"
)

const createWorkflowCalendar = `-- name: CreateWorkflowCalendar :one
INSERT INTO workflow_calendar (
    workflow_id,
    config,
    sync_token,
    execution_state,
    last_synced_at,
    created_at,
    updated_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, workflow_id, config, sync_token, execution_state, last_synced_at, created_at, updated_at
`

type CreateWorkflowCalendarParams struct {
	WorkflowID     int32  `json:"workflow_id"`
	Config         []byte `json:"config"`
	SyncToken      string `json:"sync_token"`
	ExecutionState string `json:"execution_state"`
	LastSyncedAt   int64  `json:"last_synced_at"`
	CreatedAt      int64  `json:"created_at"`
	UpdatedAt      int64  `json:"updated_at"`
}

// CreateWorkflowCalendar
//
//	INSERT INTO workflow_calendar (
//	    workflow_id,
//	    config,
//	    sync_token,
//	    execution_state,
//	    last_synced_at,
//	    created_at,
//	    updated_at
//	)
//	VALUES ($1, $2, $3, $4, $5, $6, $7)
//	RETURNING id, workflow_id, config, sync_token, execution_state, last_synced_at, created_at, updated_at
func (q *Queries) CreateWorkflowCalendar(ctx context.Context, arg *CreateWorkflowCalendarParams) (*WorkflowCalendar, error) {
	row := q.db.QueryRow(ctx, createWorkflowCalendar,
		arg.WorkflowID,
		arg.Config,
		arg.SyncToken,
		arg.ExecutionState,
		arg.LastSyncedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i WorkflowCalendar
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.Config,
		&i.SyncToken,
		&i.ExecutionState,
		&i.LastSyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getActiveWorkflowCalendarsLocked = `-- name: GetActiveWorkflowCalendarsLocked :many
WITH locked AS (
  SELECT
    wc.id,
    w.user_id
  FROM workflow_calendar wc
  INNER JOIN workflow w ON wc.workflow_id = w.id
  WHERE wc.execution_state = 'queued'
    AND wc.last_synced_at IS NOT NULL
    AND wc.last_synced_at <= extract(epoch from now()) * 1000
  FOR UPDATE OF wc SKIP LOCKED
  LIMIT $1
)
UPDATE workflow_calendar
SET execution_state = 'running'
FROM locked
WHERE workflow_calendar.id = locked.id
RETURNING workflow_calendar.id, workflow_calendar.workflow_id, workflow_calendar.config, workflow_calendar.sync_token, workflow_calendar.execution_state, workflow_calendar.last_synced_at, workflow_calendar.created_at, workflow_calendar.updated_at, locked.user_id
`

type GetActiveWorkflowCalendarsLockedRow struct {
	ID             int32  `json:"id"`
	WorkflowID     int32  `json:"workflow_id"`
	Config         []byte `json:"config"`
	SyncToken      string `json:"sync_token"`
	ExecutionState string `json:"execution_state"`
	LastSyncedAt   int64  `json:"last_synced_at"`
	CreatedAt      int64  `json:"created_at"`
	UpdatedAt      int64  `json:"updated_at"`
	UserID         string `json:"user_id"`
}

// GetActiveWorkflowCalendarsLocked
//
//	WITH locked AS (
//	  SELECT
//	    wc.id,
//	    w.user_id
//	  FROM workflow_calendar wc
//	  INNER JOIN workflow w ON wc.workflow_id = w.id
//	  WHERE wc.execution_state = 'queued'
//	    AND wc.last_synced_at IS NOT NULL
//	    AND wc.last_synced_at <= extract(epoch from now()) * 1000
//	  FOR UPDATE OF wc SKIP LOCKED
//	  LIMIT $1
//	)
//	UPDATE workflow_calendar
//	SET execution_state = 'running'
//	FROM locked
//	WHERE workflow_calendar.id = locked.id
//	RETURNING workflow_calendar.id, workflow_calendar.workflow_id, workflow_calendar.config, workflow_calendar.sync_token, workflow_calendar.execution_state, workflow_calendar.last_synced_at, workflow_calendar.created_at, workflow_calendar.updated_at, locked.user_id
func (q *Queries) GetActiveWorkflowCalendarsLocked(ctx context.Context, limit int32) ([]*GetActiveWorkflowCalendarsLockedRow, error) {
	rows, err := q.db.Query(ctx, getActiveWorkflowCalendarsLocked, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetActiveWorkflowCalendarsLockedRow
	for rows.Next() {
		var i GetActiveWorkflowCalendarsLockedRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.Config,
			&i.SyncToken,
			&i.ExecutionState,
			&i.LastSyncedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkflowCalendar = `-- name: UpdateWorkflowCalendar :exec
UPDATE workflow_calendar
SET config = $2,
    sync_token = $3,
    execution_state = $4,
    last_synced_at = $5,
    updated_at = $6
WHERE workflow_id = $1
`

type UpdateWorkflowCalendarParams struct {
	WorkflowID     int32  `json:"workflow_id"`
	Config         []byte `json:"config"`
	SyncToken      string `json:"sync_token"`
	ExecutionState string `json:"execution_state"`
	LastSyncedAt   int64  `json:"last_synced_at"`
	UpdatedAt      int64  `json:"updated_at"`
}

// UpdateWorkflowCalendar
//
//	UPDATE workflow_calendar
//	SET config = $2,
//	    sync_token = $3,
//	    execution_state = $4,
//	    last_synced_at = $5,
//	    updated_at = $6
//	WHERE workflow_id = $1
func (q *Queries) UpdateWorkflowCalendar(ctx context.Context, arg *UpdateWorkflowCalendarParams) error {
	_, err := q.db.Exec(ctx, updateWorkflowCalendar,
		arg.WorkflowID,
		arg.Config,
		arg.SyncToken,
		arg.ExecutionState,
		arg.LastSyncedAt,
		arg.UpdatedAt,
	)
	return err
}
